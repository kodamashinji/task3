実装仕様

1. 要求仕様

1.1 概要

  * 絶えず送られてくる位置情報を受信し収集できること
  * 指定した日付に収集した位置情報一覧を取得できること。ただし、前日データは、当日AM6:00までに取得できること。
  * アクティブユーザ数は20,000人/hで、今後も増加すると見込まれる
  * 日付の判定は、日本のタイムゾーンで行う
  * 24時間稼働とする


1.2 送信データ

送信データはJSON形式で、パラメータは以下の通りである。
なお、座標の測地系は実装に影響を与えないので、ここでは考慮しない。

  user_id: ユーザID。UUID形式で36文字固定
  location.lat_north_south: 北緯(N)または南緯(S)
  location.latitude: 緯度 (小数点表記。0 〜 90)
  location.lon_west_east: 西経(W)または東経(E)
  location.longitude: 経度 (小数点表記。0 〜 180)
  timestamp: 取得時間。(UNIX時間とする、UTC)

(例)
{
  "user_id": "cf5bff5c-2ffe-4f18-9593-bc666313f8c5"
  "location": {
    "lat_north_south": "N",
    "latitude": "35.744947",
    "lon_west_east": "E",
    "longitude": "139.720168"
  },
  "timestamp": 1555055157
}


1.3 送信頻度

アクティブユーザ数20,000人/hで、一人あたり平均5回/hの送信を行うものと仮定する。
つまり、アクセス数は、現状、以下の通りと想定する。

  1時間当たりのアクセス数: 20,000 x 5 = 100,000
  1分当たりのアクセス数: 100,000 / 60 = 16,666   (均等にアクセスが来るものとしている)
  1日あたりのアクセス数: 100,000 x 24 = 2,400,000  (これが一日あたりのレコード数となる)


1.4 データ保管

過去データの参照できるようにするため、取得したデータは破棄せず保管するものとする。
なお、件数が多いため、データベース等に保管せず、ファイル形式で保管する。
また、容量等の関係上、保管期限が過ぎたものを削除するといった機能が考えられるが、今回は今呂しないものとする。


1.5 取得データ

指定した日付に取得したデータの一覧をCSV形式で取得できるものとする。
ただし、取得しようとする前日のデータは、当日のAM6:00を過ぎてから取得可能であれば良い。
なお、日付や時間は、日本時間で計算する。

取得フォーマットは、1行1レコードで、以下の通りである。

  ユーザID,緯度,経度,取得時間

  ※ 行の区切り文字は"\r\n"とする
  ※ 緯度が南緯の場合は負の値で表す。また、経度が西経の場合は負の値で表す
  ※ ヘッダは無い
  ※ 行の順序は保証されない


(例)
cf5bff5c-2ffe-4f18-9593-bc666313f8c5,35.744947,139.720168,1555055157


1.6 取得方法

取得データは、http(s)経由で取得するものとする。
本来、暗号化等の機密性を考慮すべきだが、今回のケースでは考慮しない。

再取得を可能とするために、取得データは何らかの方法でサーバ側に保存するものとする。
なお、総データ量の関係で保存期間を設けるべきかもしれないが、今回は考慮しない。


2. 実装方針

リクエストは、以下の手順で処理される。

2.1 位置情報の受取

送信データの受取については、API Gatewayを用いることとする。
また、リクエスト回数を考慮し、受け取ったデータに対して直接保存等の処理を行うのではなく、一旦、SQSに位置情報を蓄えることとする。

APIGatewayがlambda関数(parse-request.py)を呼び出す形で実装される。


2.2 位置情報の一時保管

定期的にSQSから位置情報を取り出し、一つのオブジェクトにまとめて、S3(作業用フォルダ)内に保管する。
S3(作業用フォルダ)内に保管されたデータは、次以降の手順で加工される。
なお、SQS(標準キュー)を使用すれば、いったん、S3に保管せずに処理も可能だが、今回はここに記述された手順で処理を行う。

CloudWatchで定期的にlambda関数(store-request.py)を呼び出す形で実装される。


2.3 位置情報の振分

一日に一回乃至数回、S3(作業用フォルダ)内の全オブジェクトを読み込み、位置情報を日付毎に振り分ける。
振り分けられた位置情報は、取得日毎に一つのオブジェクトにまとめられる。
過去の日付のオブジェクトについてはS3(格納用フォルダ)に格納され、当日のオブジェクトについては、S3(作業用フォルダ)に戻される。
この、S3(格納用フォルダ)が、Redshift spectrumの参照ソースとなる。
なお、S3(作業用フォルダ)内のオブジェクトは、この手順の処理が終わると削除される。

CloudWatchで、毎日0:00過ぎにlambda関数(start-collect-server.py)を呼び出されることで、処理用のEC2サーバが起動される。
EC2サーバでは、起動後、retrieve-request.pyが実行される。この関数内で、この手順内の処理が実行される。


2.4 位置情報の一覧取得

Redshift spectrumから、指定した日付の位置情報一覧を取得する。
取得された位置情報一覧は、CSVに変換され、S3(ダウンロード用フォルダ)に格納される。

上記の手順で起動されたEC2サーバで、retrieve-request.pyの後に、collect-request.pyが実行される。
この関数内で、この手順内の処理が実行される。
collect-request.py終了後、lambda関数(stop-collect-server.py)を呼び出して、EC2サーバを終了する。

